let concat: List a -> List a -> List a =
    lambda xs. lambda ys.
        case xs of
            Nil => ys
            | Cons x rest => Cons x (concat rest ys)

let get: List a -> Int -> Option a =
    lambda xs. lambda i.
        case xs of
            Nil => None
            | Cons x rest =>
                if (i == 0) then
                    Some x
                else if (i < 0) then
                    None
                else
                    get rest (i - 1)

let getOrDefault: List a -> Int -> a -> a =
    lambda xs. lambda i. lambda default.
        case get xs i of
            None => default
            | Some a => a

let set: List a -> Int -> a -> List a =
    lambda xs. lambda i. lambda value.
        case xs of
            Nil => Nil
            | Cons x rest =>
                if i == 0 then
                    Cons value rest
                else if i < 0 then
                    xs
                else
                    Cons x (set rest (i - 1) value)

let foldl: (b -> a -> b) -> b -> List a -> b =
    lambda conj. lambda acc. lambda xs.
        case xs of
            Nil => acc
            | Cons x rest =>
                foldl conj (conj acc x) rest

let reverse: List a -> List a =
    foldl (lambda list. lambda x. Cons x list) Nil

let foldr: (a -> b -> b) -> b -> List a -> b =
    lambda conj. lambda acc. lambda xs.
        foldl (lambda x. lambda y. conj y x) acc (reverse xs)

let map: (a -> b) -> List a -> List b =
    lambda f. lambda xs.
        reverse (foldl (lambda acc. lambda x. Cons (f x) acc) Nil xs)

let filter: (a -> Bool) -> List a -> List a =
    lambda pred. lambda xs.
        foldr
            (lambda x. lambda acc. if pred x then Cons x acc else acc)
            Nil xs

let printListContents: (a -> Void) -> List a -> Void =
    lambda printer. lambda xs.
        case xs of
            Cons x rest =>
                printer x;
                (case rest of
                    Cons y yrest =>
                        print ", "
                    | Nil => Void);
                printListContents printer rest
            | Nil => Void

let printList: (a -> Void) -> List a -> Void =
    lambda printer. lambda xs.
        print "[";
        printListContents printer xs;
        print "]"
