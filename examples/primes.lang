let index = lambda list. lambda n. lambda default.
    case list of
        Cons h t =>
            if n == 0 then
                h
            else
                index t (n - 1) default
      | Nil => default

let set = lambda list. lambda n. lambda value.
    case list of
        Cons h t =>
            if n == 0 then
                Cons value t
            else
                Cons h (set t (n - 1) value)
      | Nil => Nil

let excludeMultiples = lambda x. lambda max. lambda isPrimeList.
    let excludeHelper = lambda n. lambda acc.
        if !(n > max) then
            excludeHelper (n + x) (set acc (n - 1) False)
        else
            acc
    in excludeHelper (2*x) isPrimeList

let initSieve = lambda n.
    let helper = lambda x. lambda acc.
        if x < n then
            helper (x + 1) (Cons True acc)
        else
            acc
    in Cons False (helper 1 Nil)

let findNext = lambda max. lambda x. lambda s.
        if x > max then
            -1
        else if index s (x - 1) False then
            x
        else
            findNext max (x + 1) s

let sieve = lambda max.
    let initial = initSieve max in
    let helper = lambda curr. lambda s.
        if curr > max then
            s
        else
            let next = findNext max curr s in
                if next != -1 then
                    helper (next + 1) (excludeMultiples next max s)
                else s
    in
        helper 2 initial

let primes = lambda max.
    let s = sieve max in
    let helper = lambda x.
        let next = findNext max x s in
            if next == -1 then
                Nil
            else
                Cons next (helper (next + 1))
    in
        helper 2

let main = primes 20
